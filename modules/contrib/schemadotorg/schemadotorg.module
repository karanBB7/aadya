<?php

/**
 * @file
 * Primary module hooks for Schema.org module.
 */

declare(strict_types=1);

use Drupal\Component\Utility\NestedArray;
use Drupal\Core\Extension\Extension;
use Drupal\Core\Field\FieldConfigInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\StringTranslation\PluralTranslatableMarkup;
use Drupal\schemadotorg\Entity\SchemaDotOrgMapping;
use Drupal\schemadotorg\Form\SchemaDotOrgSettingsFormBase;
use Drupal\schemadotorg\Plugin\EntityReferenceSelection\SchemaDotOrgEntityReferenceSelection;

// Load all MODULE.schemadotorg.inc files.
\Drupal::moduleHandler()->loadAllIncludes('schemadotorg.inc');

/**
 * Implements hook_help().
 */
function schemadotorg_help(string $route_name, RouteMatchInterface $route_match): string|NULL {
  return match ($route_name) {
    'schemadotorg' =>
      '<p>' . t('The <strong>Schema.org Blueprints</strong> module uses Schema.org as the blueprint for the content architecture and structured data in a Drupal website.') . '</p>',

    'entity.schemadotorg_mapping.collection' =>
      '<p>' . t('The <strong>Schema.org mappings</strong> page lists mappings from Drupal entity types to Schema.org types.') . '</p>',

    'entity.schemadotorg_mapping_type.collection' =>
      '<p>' . t('The <strong>Schema.org mapping types</strong> page lists mapping types with default settings for available Drupal entity types.') . '</p>',

    'schemadotorg.settings.general' =>
      '<p>' . t('The <strong>Schema.org general settings</strong> page allows administrators to configure the general settings for the Schema.org Blueprints module.') . '</p>',

    'schemadotorg.settings.types' =>
      '<p>' . t('The <strong>Schema.org types settings</strong> page allows administrators to configure the default settings for Schema.org types.') . '</p>',

    'schemadotorg.settings' =>
      '<p>' . t('The <strong>Schema.org settings</strong> page allows administrators to configure the default settings for the Schema.org Blueprints module.') . '</p>',

    'schemadotorg.settings.properties' =>
      '<p>' . t('The <strong>Schema.org properties settings</strong> page allows administrators to configure the default settings for Schema.org properties.') . '</p>',

    'schemadotorg.settings.names' =>
      '<p>'
        . t("The <strong>Schema.org names settings</strong> page allows administrators to configure how Schema.org's naming conventions for types and properties are converted to Drupal's naming conventions for bundles and fields.")
        . ' '
        . t('For example, Schema.org uses camel (camelCase) and Drupal uses snake (snake_case) and Drupal limits all entity ids and field names to 32 characters.')
        . '</p>',

    default => NULL,
  };
}

/**
 * Implements hook_system_info_alter().
 */
function schemadotorg_system_info_alter(array &$info, Extension $file, string $type): void {
  // Remove all dependencies from starter kits and demos to make them
  // easy to uninstall.
  if ($type === 'module'
    && preg_match('/^schemadotorg_(demo|starterkit)/', $file->getName())
    && \Drupal::moduleHandler()->moduleExists($file->getName())) {
    $info['dependencies'] = ['schemadotorg'];
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function schemadotorg_module_implements_alter(array &$implementations, string $hook): void {
  if ($hook === 'form_alter') {
    $implementation = $implementations['schemadotorg'];
    unset($implementations['schemadotorg']);
    $implementations['schemadotorg'] = $implementation;
  }
}

/**
 * Implements hook_page_attachments().
 */
function schemadotorg_page_attachments(array &$attachments): void {
  $attachments['#attached']['drupalSettings']['schemadotorg'] = [];
  // Add request information because JavaScript can't access this information.
  // @see js/schemadotorg.details.js
  $attachments['#attached']['drupalSettings']['schemadotorg']['request'] = [
    'method' => \Drupal::request()->getMethod(),
  ];
}

/**
 * Implements hook_form_alter().
 */
function schemadotorg_form_alter(array &$form, FormStateInterface $form_state): void {
  SchemaDotOrgSettingsFormBase::formAlter($form, $form_state);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function schemadotorg_form_system_modules_alter(array &$form, FormStateInterface $form_state): void {
  // Add fragment/hash to a sub-module's configure link so that
  // administrators can directly access a sub module's configuration.
  foreach (Element::children($form['modules']) as $package_name) {
    foreach ($form['modules'][$package_name] as $module_name => $module_build) {
      if (str_starts_with($module_name, 'schemadotorg_')
        && isset($module_build['links']['configure'])) {
        /** @var \Drupal\Core\Url $url */
        $url = $module_build['links']['configure']['#url'];
        $fragment = 'edit-' . str_replace('_', '-', $module_name);
        $url->setOption('fragment', $fragment);
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 *
 * @todo Move this to SchemaDotOrgMapping::onDependencyRemoval.
 * @see \Drupal\schemadotorg\Entity\SchemaDotOrgMapping::onDependencyRemoval
 */
function schemadotorg_field_config_delete(FieldConfigInterface $field_config): void {
  if ($field_config->isSyncing()) {
    return;
  }

  $bundle = $field_config->getTargetBundle();
  $entity_type = $field_config->getTargetEntityTypeId();

  // Make sure a property is removed.
  /** @var \Drupal\schemadotorg\SchemaDotOrgMappingInterface|null $mapping */
  $mapping = SchemaDotOrgMapping::load("$entity_type.$bundle");
  if ($mapping) {
    $mapping->removeSchemaProperty($field_config->getName());
  }
}

/* ************************************************************************** */
// Schema.org entity reference selection calculations.
// @see \Drupal\schemadotorg\Plugin\EntityReferenceSelection\SchemaDotOrgEntityReferenceSelection
/* ************************************************************************** */

/**
 * Implements hook_schemadotorg_mapping_insert().
 */
function schemadotorg_schemadotorg_mapping_insert(SchemaDotOrgMapping $mapping): void {
  if ($mapping->isSyncing()) {
    return;
  }

  // Trigger field config save to update the target bundles for the
  // Schema.org entity reference selection handler.
  /** @var \Drupal\Core\Field\FieldConfigInterface[] $field_configs */
  $field_configs = \Drupal::entityTypeManager()
    ->getStorage('field_config')
    ->loadMultiple();
  foreach ($field_configs as $field_config) {
    if (str_starts_with($field_config->getType(), 'entity_reference')
      && str_starts_with($field_config->getSetting('handler'), 'schemadotorg')) {
      $field_config->save();
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function schemadotorg_field_config_presave(FieldConfigInterface $field_config): void {
  if ($field_config->isSyncing()) {
    return;
  }

  // Check that the field type is an entity reference
  // and the entity reference handler is a 'schemadotorg' handler.
  if (!str_starts_with($field_config->getType(), 'entity_reference')
    || !str_starts_with($field_config->getSetting('handler'), 'schemadotorg')) {
    return;
  }

  $settings = $field_config->getSettings();
  $handler_settings = $settings['handler_settings'];

  $target_bundles = SchemaDotOrgEntityReferenceSelection::getTargetBundles($handler_settings);
  $handler_settings['target_bundles'] = $target_bundles;
  $field_config->setSetting('handler_settings', $handler_settings);
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Display a warning on the entity reference configuration page when the
 * expected Schema.org types and bundles do not match the
 * selected target schema types and bundles.
 */
function schemadotorg_form_field_config_edit_form_alter(array &$form, FormStateInterface $form_state): void {
  /** @var \Drupal\field_ui\Form\FieldConfigEditForm $form_object */
  $form_object = $form_state->getFormObject();
  /** @var \Drupal\field\FieldConfigInterface|null $field_config */
  $field_config = $form_object->getEntity();

  // Get the handler id.
  $handler_id = $form_state->getValue(['settings', 'handler'])
    ?: NestedArray::getValue($form, ['settings', 'handler', 'handler', '#default_value'])
      ?: '';

  // Check that the field type is an entity reference
  // and the entity reference handler is a 'schemadotorg' handler.
  if (!str_starts_with($field_config->getType(), 'entity_reference')
    || !str_starts_with($handler_id, 'schemadotorg')) {
    return;
  }

  /** @var \Drupal\schemadotorg\SchemaDotOrgMappingStorageInterface $mapping_storage */
  $mapping_storage = \Drupal::entityTypeManager()->getStorage('schemadotorg_mapping');

  // Get the field's related Schema.org mapping.
  $entity_type_id = $field_config->getTargetEntityTypeId();
  $bundle = $field_config->getTargetBundle();
  /** @var \Drupal\schemadotorg\SchemaDotOrgMappingInterface|null $mapping */
  $mapping = $mapping_storage->load("$entity_type_id.$bundle");
  if (!$mapping) {
    return;
  }

  // Get the field's Schema.org property.
  $field_name = $field_config->getName();
  $schema_type = $mapping->getSchemaType();
  $schema_property = $mapping->getSchemaPropertyMapping($field_name);
  if (!$schema_property) {
    return;
  }

  // Skip Schema.org property that used to store the main entity.
  /** @var \Drupal\schemadotorg\SchemaDotOrgSchemaTypeManagerInterface $schema_type_manager */
  $schema_type_manager = \Drupal::service('schemadotorg.schema_type_manager');
  if ($schema_type_manager->isPropertyMainEntity($schema_property)) {
    return;
  }

  // Append expected Schema.org type for the current Schema.org property to the
  // handler's 'schema_type' description.
  $range_includes = $mapping_storage->getSchemaPropertyRangeIncludes($schema_type, $schema_property);
  $t_args = [
    '%property' => $schema_property,
    '%type' => implode(', ', $range_includes),
    '%types' => implode(', ', $range_includes),
  ];
  $form['settings']['handler']['handler_settings']['schema_types']['#description'] .= ' ' . new PluralTranslatableMarkup(
      count($range_includes),
      'The recommended Schema.org type for the %property property is %type.',
      'The recommended Schema.org types for the %property property are %types.',
      $t_args
    );
}

/**
 * Implements hook_views_data_alter().
 */
function schemadotorg_views_data_alter(array &$data): void {
  /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager */
  $entity_type_manager = \Drupal::entityTypeManager();
  /** @var \Drupal\schemadotorg\Entity\SchemaDotOrgMappingType[] $schema_types */
  $schema_types = $entity_type_manager->getStorage('schemadotorg_mapping_type')->loadMultiple();
  $entity_type_ids = array_keys($schema_types);
  foreach ($entity_type_ids as $entity_type_id) {
    if (!($entity_type_manager->hasDefinition($entity_type_id))) {
      continue;
    }
    $entity_type = $entity_type_manager->getDefinition($entity_type_id);
    $data_table = $entity_type->getDataTable();
    if (!empty($data_table)) {
      $data[$data_table]['schemadotorg_type'] = [
        'filter' => [
          'field' => $entity_type->getKey('bundle'),
          'id' => 'schemadotorg_type',
          'title' => t('Schema.org type'),
          'table' => $data_table,
          'entity_type' => $entity_type_id,
          'allow_empty' => FALSE,
        ],
      ];
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for page title templates.
 */
function schemadotorg_preprocess_page_title(array &$variables): void {
  if (!str_contains(\Drupal::routeMatch()->getRouteName(), 'schemadotorg')) {
    return;
  }

  // Add the Schema.org Blueprints logo to all 'schemadotorg' routes.
  $module_path = \Drupal::service('extension.list.module')->getPath('schemadotorg');
  $variables['title'] = [
    'image' => [
      [
        '#theme' => 'image',
        '#uri' => $module_path . '/logo.png',
        '#alt' => t('Logo for the Schema.org Blueprints project'),
        '#attributes' => ['class' => ['schemadotorg-logo']],
        '#attached' => ['library' => ['schemadotorg/schemadotorg.logo']],
      ],
    ],
    'title' => [
      '#markup' => $variables['title'],
    ],
  ];
}
