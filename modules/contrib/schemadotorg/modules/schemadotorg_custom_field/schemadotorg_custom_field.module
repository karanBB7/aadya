<?php

/**
 * @file
 * Allows Custom Fields to be used to create Schema.org relationships.
 */

declare(strict_types=1);

use Drupal\Core\Field\FieldItemInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\BubbleableMetadata;

/**
 * Implements hook_schemadotorg_property_field_type_alter().
 */
function schemadotorg_custom_field_schemadotorg_property_field_type_alter(array &$field_types, string $schema_type, string $schema_property): void {
  /** @var \Drupal\schemadotorg_custom_field\SchemaDotOrgCustomFieldManagerInterface $custom_field_manager */
  $custom_field_manager = \Drupal::service('schemadotorg_custom_field.manager');
  $custom_field_manager->propertyFieldTypeAlter($field_types, $schema_type, $schema_property);
}

/**
 * Implements hook_schemadotorg_property_field_prepare().
 */
function schemadotorg_custom_field_schemadotorg_property_field_prepare(array &$default_field, string $schema_type, string $schema_property): void {
  /** @var \Drupal\schemadotorg_custom_field\SchemaDotOrgCustomFieldManagerInterface $custom_field_manager */
  $custom_field_manager = \Drupal::service('schemadotorg_custom_field.manager');
  $custom_field_manager->propertyFieldPrepare($default_field, $schema_type, $schema_property);
}

/**
 * Implements hook_schemadotorg_property_field_alter().
 */
function schemadotorg_custom_field_schemadotorg_property_field_alter(
  string $schema_type,
  string $schema_property,
  array &$field_storage_values,
  array &$field_values,
  ?string &$widget_id,
  array &$widget_settings,
  ?string &$formatter_id,
  array &$formatter_settings,
): void {
  /** @var \Drupal\schemadotorg_custom_field\SchemaDotOrgCustomFieldManagerInterface $custom_field_manager */
  $custom_field_manager = \Drupal::service('schemadotorg_custom_field.manager');
  $custom_field_manager->propertyFieldAlter(
    $schema_type,
    $schema_property,
    $field_storage_values,
    $field_values,
    $widget_id,
    $widget_settings,
    $formatter_id,
    $formatter_settings
  );
}

/* ************************************************************************** */
// Schema.org JSON-LD.
/* ************************************************************************** */

/**
 * Implements hook_schemadotorg_jsonld_schema_property_alter().
 */
function schemadotorg_custom_field_schemadotorg_jsonld_schema_property_alter(mixed &$value, FieldItemInterface $item, BubbleableMetadata $bubbleable_metadata): void {
  /** @var \Drupal\schemadotorg_custom_field\SchemaDotOrgCustomFieldJsonLdManagerInterface $custom_field_jsonld_manager */
  $custom_field_jsonld_manager = \Drupal::service('schemadotorg_custom_field.jsonld_manager');
  $custom_field_jsonld_manager->jsonLdSchemaPropertyAlter($value, $item);
}

/* ************************************************************************** */
// Schema.org types settings form.
/* ************************************************************************** */

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @see \Drupal\schemadotorg\Form\SchemaDotOrgSettingsFormBase::afterBuildDetails
 * @see \Drupal\schemadotorg\Form\SchemaDotOrgSettingsFormBase::formAlter
 */
function schemadotorg_custom_field_form_schemadotorg_properties_settings_form_alter(array &$form, FormStateInterface $form_state): void {
  // Get available custom field data types.
  // Predefined the expected data types in the desired order.
  $data_types = [
    'string' => NULL,
    'string_long' => NULL,
    'boolean' => NULL,
    'color' => NULL,
    'decimal' => NULL,
    'float' => NULL,
    'integer' => NULL,
    'email' => NULL,
    'uuid' => NULL,
    'map' => NULL,
    'uri' => NULL,
  ];
  /** @var \Drupal\custom_field\Plugin\CustomFieldTypeManagerInterface $custom_field_type_manager */
  $custom_field_type_manager = \Drupal::service('plugin.manager.custom_field_type');
  foreach ($custom_field_type_manager->dataTypes() as $key => $data_type) {
    $data_types[$key] = '# ' . $key . ' = ' . $data_type['label'];
  }
  $data_types = array_filter($data_types);

  // Get available filter formats.
  $formats = filter_formats();
  $format_options = ['' => t('- Default -')];
  foreach ($formats as $format) {
    $format_options[$format->id()] = $format->label();
  }

  $form['schemadotorg_custom_field'] = [
    '#type' => 'details',
    '#title' => t('Custom field settings'),
  ];
  $form['schemadotorg_custom_field']['default_schema_properties'] = [
    '#type' => 'schemadotorg_settings',
    '#title' => t('Default custom field properties'),
    '#description' => t('Enter Schema.org properties that should be mapped to a Schema.org type using a Custom field.'),
    '#description_link' => 'types',
    '#example' => '# Custom field data types' . PHP_EOL
  . '# -----------------------' . PHP_EOL
  . implode(PHP_EOL, $data_types)
  . PHP_EOL
  . 'propertyName:
  type: SchemaType
  properties:
    propertyName01: string
    propertyName02: integer
    propertyName03: boolean',
  ];
  $form['schemadotorg_custom_field']['default_format'] = [
    '#type' => 'select',
    '#title' => t('Default custom field format'),
    '#description' => t('Select the default format used by text (plain, long) custom fields.'),
    '#options' => $format_options,
  ];
}
