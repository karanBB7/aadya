<?php

/**
 * @file
 * Adds field validation/constraint rules to Schema.org properties.
 */

declare(strict_types=1);

use Drupal\Core\Field\FieldConfigInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_field_config_insert().
 */
function schemadotorg_field_validation_field_config_insert(FieldConfigInterface $field_config): void {
  if ($field_config->isSyncing()) {
    return;
  }

  if (empty($field_config->schemaDotOrgProperty) || $field_config->getType() !== 'string') {
    return;
  }

  $field_name = $field_config->getName();
  $schema_property = $field_config->schemaDotOrgProperty;

  $validation_rules = \Drupal::config('schemadotorg_field_validation.settings')
    ->get('rules');
  $schema_validation_rule = $validation_rules[$schema_property]
    ?? $validation_rules[$field_name]
    ?? NULL;
  if (!$schema_validation_rule) {
    return;
  }

  $entity_type_id = $field_config->getTargetEntityTypeId();
  $bundle = $field_config->getTargetBundle();
  $field_label = $field_config->getLabel();

  // Load or create validation rule set.
  // @see \Drupal\field_validation\Form\FieldValidationRuleSetAddForm::validateForm
  /** @var \Drupal\Core\Entity\ContentEntityStorageInterface $ruleset_storage */
  $ruleset_storage = \Drupal::entityTypeManager()
    ->getStorage('field_validation_rule_set');
  $ruleset_name = "{$entity_type_id}_{$bundle}";
  /** @var \Drupal\field_validation\FieldValidationRuleSetInterface $ruleset */
  $ruleset = $ruleset_storage->load($ruleset_name) ?? $ruleset_storage->create([
    'name' => $ruleset_name,
    'label' => "$entity_type_id $bundle validation",
    'entity_type' => $entity_type_id,
    'bundle' => $bundle,
  ]);

  // Make sure the validation rule does not already exist.
  $validation_rules = $ruleset->getFieldValidationRules();
  foreach ($validation_rules as $validation_rule) {
    $configuration = $validation_rule->getConfiguration();
    if (
      $configuration['id'] === 'regex_constraint_rule'
      && $configuration['field_name'] === $field_name
      && $configuration['data']['pattern'] === $schema_validation_rule['pattern']
      && $configuration['data']['message'] === $schema_validation_rule['message']
    ) {
      return;
    }
  }

  // Add regex validation rule.
  // @see \Drupal\field_validation\Plugin\FieldValidationRule\RegexFieldValidationRule
  $ruleset->addFieldValidationRule([
    'id' => 'regex_constraint_rule',
    'title' => "Schema.org: $field_label",
    'field_name' => $field_name,
    'data' => [
      'validate_mode' => 'default',
      'pattern' => $schema_validation_rule['pattern'],
      'message' => $schema_validation_rule['message'],
    ],
    'column' => 'value',
    'weight' => 0,
  ]);

  $ruleset->save();
}

/* ************************************************************************** */
// Schema.org properties settings form.
/* ************************************************************************** */

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @see \Drupal\schemadotorg\Form\SchemaDotOrgSettingsFormBase::afterBuildDetails
 * @see \Drupal\schemadotorg\Form\SchemaDotOrgSettingsFormBase::formAlter
 */
function schemadotorg_field_validation_form_schemadotorg_properties_settings_form_alter(array &$form, FormStateInterface $form_state): void {
  $form['schemadotorg_field_validation'] = [
    '#type' => 'details',
    '#title' => t('Field validation settings'),
  ];
  $form['schemadotorg_field_validation']['rules'] = [
    '#type' => 'schemadotorg_settings',
    '#title' => t('Field validation rules'),
    '#description' => t('Enter field validation rules for Schema.org types and fields.'),
    '#example' => "
propertyName:
  pattern: '/^\d{10]$/'
  message: 'Property name must be a 10-digit number.'
",
  ];
}
