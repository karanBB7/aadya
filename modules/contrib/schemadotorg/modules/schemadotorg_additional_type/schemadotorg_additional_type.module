<?php

/**
 * @file
 * Subtypes allow more specificity without having to create dedicated entity types.
 */

declare(strict_types=1);

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function schemadotorg_additional_type_help(string $route_name, RouteMatchInterface $route_match): string|NULL {
  if ($route_name === 'schemadotorg_additional_type.settings') {
    return '<p>' . t('The <strong>Schema.org additional type settings</strong> page allows administrators to configure default setting for additional typing.') . '<p>';
  }

  return NULL;
}

/* ************************************************************************** */
// Schema.org mapping defaults.
/* ************************************************************************** */

/**
 * Implements hook_schemadotorg_mapping_defaults_alter().
 */
function schemadotorg_additional_type_schemadotorg_mapping_defaults_alter(array &$defaults, string $entity_type_id, ?string $bundle, string $schema_type): void {
  /** @var \Drupal\schemadotorg_additional_type\SchemaDotOrgAdditionalTypeManagerInterface $additional_type_manager */
  $additional_type_manager = \Drupal::service('schemadotorg_additional_type.manager');
  $additional_type_manager->mappingDefaultsAlter($defaults, $entity_type_id, $bundle, $schema_type);
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function schemadotorg_additional_type_form_schemadotorg_mapping_form_alter(array &$form, FormStateInterface &$form_state): void {
  /** @var \Drupal\schemadotorg_additional_type\SchemaDotOrgAdditionalTypeManagerInterface $additional_type_manager */
  $additional_type_manager = \Drupal::service('schemadotorg_additional_type.manager');
  $additional_type_manager->alterMappingForm($form, $form_state);
}

/* ************************************************************************** */
// Schema.org JSON-LD.
/* ************************************************************************** */

/**
 * Implements hook_schemadotorg_jsonld_schema_type_entity_alter().
 *
 * Besides, altering an existing Schema.org mapping's JSON-LD data, modules can
 * define custom JSON-LD data for any entity type.
 */
function schemadotorg_additional_type_schemadotorg_jsonld_schema_type_entity_alter(array &$data, EntityInterface $entity): void {
  // Check that the additional type property is set, if not exit.
  if (empty($data['additionalType'])) {
    return;
  }

  // If the additional type property is valid subtype move it to the @type
  // and unset the additionalType property.
  /** @var \Drupal\schemadotorg\SchemaDotOrgSchemaTypeManagerInterface $schema_type_manager */
  $schema_type_manager = \Drupal::service('schemadotorg.schema_type_manager');
  if ($schema_type_manager->isSubTypeOf($data['additionalType'], $data['@type'])) {
    $data['@type'] = $data['additionalType'];
    unset($data['additionalType']);
  }
}

/* ************************************************************************** */
// Schema.org types settings form.
/* ************************************************************************** */

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @see \Drupal\schemadotorg\Form\SchemaDotOrgSettingsFormBase::afterBuildDetails
 * @see \Drupal\schemadotorg\Form\SchemaDotOrgSettingsFormBase::formAlter
 */
function schemadotorg_additional_type_form_schemadotorg_types_settings_form_alter(array &$form, FormStateInterface $form_state): void {
  $form['schemadotorg_additional_type'] = [
    '#type' => 'details',
    '#title' => t('Additional type settings'),
  ];
  $form['schemadotorg_additional_type']['default_types'] = [
    '#type' => 'schemadotorg_settings',
    '#title' => t('Default additional types'),
    '#description' => t('Enter Schema.org types that support additional typing by default.'),
    '#description_link' => 'subtypes',
    '#example' => '
- SchemaType01
- SchemaType02
- SchemaType03
',
  ];
  $form['schemadotorg_additional_type']['default_allowed_values'] = [
    '#type' => 'schemadotorg_settings',
    '#title' => t('Schema.org default additional types allowed values'),
    '#description' => t('Enter default additional type allowed values for Schema.org types.')
      . ' '
      . t('Subtype allowed values that are not valid Schema.org types will be rendered as an <a href=":href">additionalType</a> property via JSON-LD', [':href' => 'https://schema.org/additionalType']),
    '#description_link' => 'types',
    '#example' => '
SchemaType:
  SchemaSubtype01: Subtype 01
  SchemaSubtype02: Subtype 02
  SchemaSubtype03: Subtype 03
',
  ];
}
