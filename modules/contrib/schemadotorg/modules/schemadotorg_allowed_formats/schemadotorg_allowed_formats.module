<?php

/**
 * @file
 * Allows Allowed Formats to be used to create Schema.org relationships.
 */

declare(strict_types=1);

use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_schemadotorg_property_field_alter().
 */
function schemadotorg_allowed_formats_schemadotorg_property_field_alter(
  string $schema_type,
  string $schema_property,
  array &$field_storage_values,
  array &$field_values,
  ?string &$widget_id,
  array &$widget_settings,
  ?string &$formatter_id,
  array &$formatter_settings,
): void {
  if (!in_array($field_storage_values['type'], _allowed_formats_field_types())) {
    return;
  }

  /** @var \Drupal\schemadotorg\SchemaDotOrgSchemaTypeManagerInterface $schema_type_manager */
  $schema_type_manager = \Drupal::service('schemadotorg.schema_type_manager');

  $config = \Drupal::config('schemadotorg_allowed_formats.settings');

  // Set default allowed formats.
  $default_allowed_formats = $config->get('default_allowed_formats');
  $setting_parts = [
    'entity_type_id' => $field_values['entity_type'],
    'bundle' => $field_values['bundle'],
    'schema_type' => $schema_type,
    'schema_property' => $schema_property,
  ];
  $allowed_formats = $schema_type_manager->getSetting($default_allowed_formats, $setting_parts);
  if ($allowed_formats) {
    $field_values['settings']['allowed_formats'] = $allowed_formats;
  }

  // Set default hide help.
  $default_hide_help = $config->get('default_hide_help');
  if ($default_hide_help) {
    $widget_settings['third_party_settings']['allowed_formats']['hide_help'] = '1';
  }

  // Set default hide guidelines.
  $default_hide_guidelines = $config->get('default_hide_guidelines');
  if ($default_hide_guidelines) {
    $widget_settings['third_party_settings']['allowed_formats']['hide_guidelines'] = '1';
  }
}

/* ************************************************************************** */
// Schema.org properties settings form.
/* ************************************************************************** */

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @see \Drupal\schemadotorg\Form\SchemaDotOrgSettingsFormBase::afterBuildDetails
 * @see \Drupal\schemadotorg\Form\SchemaDotOrgSettingsFormBase::formAlter
 */
function schemadotorg_allowed_formats_form_schemadotorg_properties_settings_form_alter(array &$form, FormStateInterface $form_state): void {
  $allowed_formats_options = [];
  foreach (filter_formats() as $format) {
    $allowed_formats_options[$format->id()] = $format->label();
  }

  $form['schemadotorg_allowed_formats'] = [
    '#type' => 'details',
    '#title' => t('Allowed formats settings'),
  ];
  $form['schemadotorg_allowed_formats']['default_allowed_formats'] = [
    '#type' => 'schemadotorg_settings',
    '#title' => t('Default allowed formats'),
    '#description' => t('Enter allowed formats for specific entity type/bundle or Schema.org type/properties.'),
    '#description_link' => 'properties',
    '#example' => '
schemaProperty:
  - full_html
  - basic_html
SchemaType--propertyName:
  - full_html
  - basic_html
entity_type_id:
  - full_html
  - basic_html
',
  ];
  $form['schemadotorg_allowed_formats']['default_hide_help'] = [
    '#type' => 'checkbox',
    '#title' => t('Hide the help link <em>About text formats</em>.'),
    '#description' => t('If checked, the help link will be hidden when text format widgets are created.'),
  ];
  $form['schemadotorg_allowed_formats']['default_hide_guidelines'] = [
    '#type' => 'checkbox',
    '#title' => t('Hide text format guidelines.'),
    '#description' => t('If checked, the text format guidelines will be hidden when text format widgets are created.'),
  ];
}
