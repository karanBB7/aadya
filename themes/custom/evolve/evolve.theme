<?php 
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Template\Attribute;
use Drupal\node\Entity\Node;
use Drupal\taxonomy\Entity\Term;
use Drupal\file\Entity\File;
use Drupal\Core\Url;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\Core\Form;
use Drupal\Core\Form\FormBase;
use Drupal\Core\Language\LanguageInterface;
use Drupal\media\Entity\Media;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\user\Entity\User;
use Drupal\paragraphs\Entity\Paragraph;

function evolve_preprocess_node(&$variables) {
	global $base_url;
	if(!empty($variables['node']) && isset($variables['node'])){
		$node = $variables['node'];
		if(!empty($node)){
			$node_id = $node->id();
			$variables['node_id'] = $node_id;
		}
	}
	if ($node instanceof \Drupal\node\NodeInterface) {
		if($node->getType() == 'article'){
			$currentNode = Node::load($node_id);
			$tags = $currentNode->get('field_tags')->getValue();
			$tag_arr = [];
			if(!empty($tags)){
				foreach($tags as $value){
					$tag_arr[] = $value['target_id'];
				}
			}

			$query = \Drupal::entityQuery("node");
			$query->condition("type", "article");
			$query->condition("nid", $node_id,'!=');
			//$query->condition('field_tags.target_id', $tag_arr);
			$query->sort('created', 'DESC');
			$query->accessCheck(TRUE);
			$results = $query->execute();
			$nodes = \Drupal\node\Entity\Node::loadMultiple($results);
			$blog_might = array();
			foreach ($nodes as $key => $val) {
				$title = !empty($val->get("title")->getValue()) ? $val->get("title")->getValue()[0]['value'] : '';
				$author = !empty($val->get("field_author")->getValue()) ? $val->get("field_author")->getValue()[0]['value'] : '';
				$short_description = !empty($val->get("field_short_description")->getValue()) ? $val->get("field_short_description")->getValue()[0]['value'] : '';
				$image = !empty($val->get("field_image")->getValue()) ? $val->get("field_image")->getValue()[0]['target_id'] : '';
				if(!empty($image)){
					$article_img = \Drupal\file\Entity\File::load($image)->createFileUrl();

				}
				$url_alias = Url::fromRoute('entity.node.canonical', ['node' => $val->id()])->toString();
				$blog_might[$key]['title'] = !empty($title) ? $title : '';
				$blog_might[$key]['author'] = !empty($author) ? $author : '';
				$blog_might[$key]['url_alias'] = !empty($url_alias) ? $url_alias : '';
				$blog_might[$key]['article_img'] = !empty($article_img) ? $article_img : '';
			}

			$entityTypeManager = \Drupal::service('entity_type.manager');

			  // Load comments associated with the node.
			$query = $entityTypeManager->getStorage('comment')->getQuery();
			$query->condition('entity_type', 'node')
			    ->condition('entity_id', $node_id)
			    ->condition('status', \Drupal\comment\Entity\Comment::PUBLISHED);
			  // Execute the query and fetch comment IDs.
			$query->accessCheck(TRUE);
			$comment_ids = $query->execute();
			$comments = $entityTypeManager->getStorage('comment')->loadMultiple($comment_ids);
			$comments_info = [];
			foreach ($comments as $comment) {
			    $name = $comment->get('field_fullname')->value;
			    $email = $comment->get('field_email_address')->value;
			    $comment_body = $comment->get('comment_body')->value;
			    $created = $comment->getCreatedTime();

			    $comments_info[] = [
			      'name' => $name,
			      'email' => $email,
			      'comment_body' => $comment_body,
			      'created' => date('F d,Y',$created),
			    ];
			}
			$variables['blog_might'] = $blog_might;
			$variables['comments_info'] = $comments_info;
		}
	}
	
}


function evolve_preprocess_html(&$variables) {
  $route_match = \Drupal::routeMatch();
  $route_name = $route_match->getRouteName();

  if ($route_name === 'userprofile.getprofile') {
    $username = $route_match->getParameter('username');
    $query = \Drupal::database()->select('users_field_data', 'u');
    $query->addField('u', 'uid');
    $query->condition('u.name', $username);
    $uid = $query->execute()->fetchField();

    if (!empty($uid)) {
      $user = User::load($uid);
      $para = $user->get("field_paragraphtheme1")->getValue();
      
      if (!empty($para)) {
        $arr_data = [];
        foreach ($para as $value) {
          $paragraph = Paragraph::load($value["target_id"]);
          if ($paragraph && $paragraph->getType() == 'profile_theme1') {
            $arr_data['profile_theme1'] = [
              'field_name' => $paragraph->hasField('field_name') ? $paragraph->get('field_name')->value : $user->getDisplayName(),
              'field_specialitiy' => $paragraph->hasField('field_specialitiy') ? $paragraph->get('field_specialitiy')->value : 'Not specified',
              'field_overview' => $paragraph->hasField('field_overview') ? $paragraph->get('field_overview')->value : 'No overview available',
              'field_background_image' => [
                'url' => $paragraph->hasField('field_background_image') && !$paragraph->get('field_background_image')->isEmpty() 
                  ? $paragraph->get('field_background_image')->entity->createFileUrl() 
                  : '',
              ],
              'field_phone_number' => $paragraph->hasField('field_phone_number') ? $paragraph->get('field_phone_number')->value : 'Not provided',
              'field_email_address' => $paragraph->hasField('field_email_address') ? $paragraph->get('field_email_address')->value : $user->getEmail(),
              'field_profilerating' => $paragraph->hasField('field_profilerating') ? $paragraph->get('field_profilerating')->value : '1',
              'field_review_count' => $paragraph->hasField('field_review_count') ? $paragraph->get('field_review_count')->value : '1',
            ];

            // Fetch logos and addresses
            if ($paragraph->hasField('field_logos')) {
              $logos = $paragraph->get('field_logos')->referencedEntities();
              foreach ($logos as $key => $logo) {
                $arr_data['profile_theme1']['field_logos'][$key] = [
                  'field_address' => $logo->hasField('field_address') ? $logo->get('field_address')->value : '',
                ];
              }
            }

            // Fetch clinic appointments
            $para1 = $user->get("field_book_appointment")->getValue();
            foreach ($para1 as $appointmentValue) {
              $appointmentParagraph = Paragraph::load($appointmentValue["target_id"]);
              if ($appointmentParagraph) {
                $fields = $appointmentParagraph->getFields();
                foreach ($fields as $field_name => $field) {
                  if ($field->getFieldDefinition()->getType() == "entity_reference_revisions") {
                    $childPara = $appointmentParagraph->get($field_name)->getValue();
                    foreach ($childPara as $key => $valuechild) {
                      $childParagraph = Paragraph::load($valuechild["target_id"]);
                      if ($childParagraph) {
                        $clinctarget_id = $childParagraph->get('field_clinic_name')->getValue()[0]['target_id'] ?? null;
                        if ($clinctarget_id) {
                          $clincterm = Term::load($clinctarget_id);
                          if ($clincterm) {
                            $arr_data['doctor_clinic_appointment'][] = [
                              'clinic_name' => $clincterm->getName(),
                              'target_id' => $valuechild["target_id"],
                              'address' => $clincterm->get('field_address')->getValue()[0]['value'] ?? '',
                              'instructions' => $clincterm->get('field_instructions')->getValue()[0]['value'] ?? '',
                              'clinc_number' => $clincterm->get('field_clinic_phone_number')->getValue()[0]['value'] ?? '',
                            ];
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            
            break; // We only need the first 'profile_theme1' paragraph
          }
        }

        if (!empty($arr_data)) {
          $variables['arr_data'] = $arr_data;
          
          if (!empty($arr_data['doctor_clinic_appointment'])) {
            $first_clinic = reset($arr_data['doctor_clinic_appointment']);
            $variables['first_clinic_address'] = $first_clinic['address'];
            $variables['first_clinic_name'] = $first_clinic['clinic_name'];
          }
        }
      }
    }
  }
}
  
?>